<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Log[log]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-07-02 11:19:06 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.LogMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="LogPO">
		INSERT INTO log (
		
		<if test="party != null and party != ''">
	         party, <!-- party -->
		</if>
		<if test="category != null and category != ''">
	         category, <!-- category -->
		</if>
		<if test="title != null and title != ''">
	         title, <!-- title -->
		</if>
		<if test="take != null and take != ''">
	         take, <!-- take -->
		</if>
		<if test="ip_address != null and ip_address != ''">
	         ip_address, <!-- ip_address -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- create_time -->
		</if>
		<if test="id != null and id != ''">
	         id <!-- id -->
		</if>
		)VALUES(
		
		<if test="party != null and party != ''">
	          #{party, jdbcType=VARCHAR}, <!-- party -->
	    </if>
		<if test="category != null and category != ''">
	          #{category, jdbcType=VARCHAR}, <!-- category -->
	    </if>
		<if test="title != null and title != ''">
	          #{title, jdbcType=VARCHAR}, <!-- title -->
	    </if>
		<if test="take != null and take != ''">
	          #{take, jdbcType=VARCHAR}, <!-- take -->
	    </if>
		<if test="ip_address != null and ip_address != ''">
	          #{ip_address, jdbcType=VARCHAR}, <!-- ip_address -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- create_time -->
	    </if>
	    <if test="id != null and id != ''">
	          #{id, jdbcType=VARCHAR} <!-- id -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="LogPO">
		INSERT INTO log (
		    <include refid="column" />
		)
		VALUES (
		    #{id, jdbcType=VARCHAR},  <!-- id -->
		    #{party, jdbcType=VARCHAR},  <!-- party -->
		    #{category, jdbcType=VARCHAR},  <!-- category -->
		    #{title, jdbcType=VARCHAR},  <!-- title -->
		    #{take, jdbcType=VARCHAR},  <!-- take -->
		    #{ip_address, jdbcType=VARCHAR},  <!-- ip_address -->
		    #{create_time, jdbcType=VARCHAR}  <!-- create_time -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="LogPO">
		UPDATE log
		<set>
			<if test="id != null">
		          id = #{id, jdbcType=VARCHAR},  <!-- id -->
			</if>
			<if test="party != null">
		          party = #{party, jdbcType=VARCHAR},  <!-- party -->
			</if>
			<if test="category != null">
		          category = #{category, jdbcType=VARCHAR},  <!-- category -->
			</if>
			<if test="title != null">
		          title = #{title, jdbcType=VARCHAR},  <!-- title -->
			</if>
			<if test="take != null">
		          take = #{take, jdbcType=VARCHAR},  <!-- take -->
			</if>
			<if test="ip_address != null">
		          ip_address = #{ip_address, jdbcType=VARCHAR},  <!-- ip_address -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- create_time -->
			</if>
		</set>
		WHERE 
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM log WHERE  id = #{id}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="LogPO">
		SELECT
		<include refid="column" />
		FROM log WHERE  id = #{id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="LogPO">
		SELECT
		    <include refid="column" />
		FROM log
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="LogPO">
		SELECT
			<include refid="column" />	
		FROM log
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="LogPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM log
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="LogPO">
		SELECT
			<include refid="column" />	
		FROM log
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="LogPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM log
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM log
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM log
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id,  <!-- id -->
		  party,  <!-- party -->
		  category,  <!-- category -->
		  title,  <!-- title -->
		  take,  <!-- take -->
		  ip_address,  <!-- ip_address -->
		  create_time  <!-- create_time -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  log.id,  <!-- id -->
		  log.party,  <!-- party -->
		  log.category,  <!-- category -->
		  log.title,  <!-- title -->
		  log.take,  <!-- take -->
		  log.ip_address,  <!-- ip_address -->
		  log.create_time  <!-- create_time -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id != null and id != ''">
		      AND id = #{id}  <!-- id -->
		</if>
	    <if test="party != null and party != ''">
		      AND party = #{party}  <!-- party -->
		</if>
	    <if test="category != null and category != ''">
		      AND category = #{category}  <!-- category -->
		</if>
	    <if test="title != null and title != ''">
		      AND title = #{title}  <!-- title -->
		</if>
	    <if test="take != null and take != ''">
		      AND take = #{take}  <!-- take -->
		</if>
	    <if test="ip_address != null and ip_address != ''">
		      AND ip_address = #{ip_address}  <!-- ip_address -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- create_time -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id != null and id != ''">
		      AND id like '%${id}%'  <!-- id -->
		</if>
	    <if test="party != null and party != ''">
		      AND party like '%${party}%'  <!-- party -->
		</if>
	    <if test="category != null and category != ''">
		      AND category like '%${category}%'  <!-- category -->
		</if>
	    <if test="title != null and title != ''">
		      AND title like '%${title}%'  <!-- title -->
		</if>
	    <if test="take != null and take != ''">
		      AND take like '%${take}%'  <!-- take -->
		</if>
	    <if test="ip_address != null and ip_address != ''">
		      AND ip_address like '%${ip_address}%'  <!-- ip_address -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '%${create_time}%'  <!-- create_time -->
		</if>
	</sql>
	
</mapper>