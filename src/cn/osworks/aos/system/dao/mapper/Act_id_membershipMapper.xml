<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ACT_ID_MEMBERSHIP[act_id_membership]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-12-18 15:50:46 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Act_id_membershipMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Act_id_membershipPO">
		INSERT INTO act_id_membership (
		<if test="user_id_ != null and user_id_ != ''">
	          user_id_,  <!-- USER_ID_ -->
	   </if>
		<if test="group_id_ != null and group_id_ != ''">
	          group_id_  <!-- GROUP_ID_ -->
	   </if>
		)VALUES(
		<if test="user_id_ != null and user_id_ != ''">
		     #{user_id_, jdbcType=VARCHAR},  <!-- USER_ID_ -->
	    </if>
		<if test="group_id_ != null and group_id_ != ''">
		     #{group_id_, jdbcType=VARCHAR}  <!-- GROUP_ID_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Act_id_membershipPO">
		INSERT INTO act_id_membership (
		    <include refid="column" />
		)
		VALUES (
		    #{user_id_, jdbcType=VARCHAR},  <!-- USER_ID_ -->
		    #{group_id_, jdbcType=VARCHAR}  <!-- GROUP_ID_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Act_id_membershipPO">
		UPDATE act_id_membership
		<set>
			<if test="user_id_ != null">
		          user_id_ = #{user_id_, jdbcType=VARCHAR},  <!-- USER_ID_ -->
			</if>
			<if test="group_id_ != null">
		          group_id_ = #{group_id_, jdbcType=VARCHAR},  <!-- GROUP_ID_ -->
			</if>
		</set>
		WHERE  user_id_ = #{user_id_} AND group_id_ = #{group_id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM act_id_membership WHERE  user_id_ = #{user_id_} AND group_id_ = #{group_id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Act_id_membershipPO">
		SELECT
		<include refid="column" />
		FROM act_id_membership WHERE  user_id_ = #{user_id_} AND group_id_ = #{group_id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Act_id_membershipPO">
		SELECT
		    <include refid="column" />
		FROM act_id_membership
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Act_id_membershipPO">
		SELECT
			<include refid="column" />	
		FROM act_id_membership
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Act_id_membershipPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM act_id_membership
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Act_id_membershipPO">
		SELECT
			<include refid="column" />	
		FROM act_id_membership
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Act_id_membershipPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM act_id_membership
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM act_id_membership
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM act_id_membership
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  user_id_,  <!-- USER_ID_ -->
		  group_id_  <!-- GROUP_ID_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  act_id_membership.user_id_,  <!-- USER_ID_ -->
		  act_id_membership.group_id_  <!-- GROUP_ID_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="user_id_ != null and user_id_ != ''">
		      AND user_id_ = #{user_id_}  <!-- USER_ID_ -->
		</if>
	    <if test="group_id_ != null and group_id_ != ''">
		      AND group_id_ = #{group_id_}  <!-- GROUP_ID_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="user_id_ != null and user_id_ != ''">
		      AND user_id_ like '%${user_id_}%'  <!-- USER_ID_ -->
		</if>
	    <if test="group_id_ != null and group_id_ != ''">
		      AND group_id_ like '%${group_id_}%'  <!-- GROUP_ID_ -->
		</if>
	</sql>
	
</mapper>